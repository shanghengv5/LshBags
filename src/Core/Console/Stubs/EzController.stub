<?php

namespace EzNamespace;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use EzServcieNamespace\EzClassNameService;
use Lsh\Core\BaseController;

class EzClassNameController extends Controller
{
    use BaseController;

    /**
     * 列表筛选规则
     * @var 
     */
    protected $listRule = [

    ];

    /**
     * 添加筛选规则
     * @var 
     */
    protected $storeRule = [

    ];

    /**
     * 更新筛选规则
     * @var 
     */
    protected $updateRule = [

    ];

    /**
     * 服务对象
     * @var 
     */
    protected $service;

    public function __construct()
    {
        $this->service = new EzClassNameService();
    }

    /**
     * @name: LiShangHeng
     * @msg: 列表
     * @param Request $request
     * @return Response 
     */
    public function index(Request $request) {
        $listData = $this->listData($request);
        $list = $this->service->list($listData);
        return $this->service->hasPage() ?  $this->response([],$list) : $this->response($list);
    }
    
    /**
     * @name: LiShangHeng
     * @msg: 详情
     * @param int $id
     * @return Response 
     */
    public function show($id) {
        $data = $this->service->details($id);
        return $this->response($data);
    }

    /**
     * @name: LiShangHeng
     * @msg: 保存信息
     * @param Request $request 
     * @return Response $response
     */
    public function store(Request $request) {
        try {
            \DB::beginTransaction();
            $storeData = $this->storeData($request);
            $data = $this->service->add($storeData);
            \DB::commit(); 
        } catch(\Exception $e) {
            logger($e->getMessage());
            \DB::rollBack();
            throw new \Exception($e);
        }
        return $this->response($data);
    }

    /**
     * @name: LiShangHeng
     * @msg: 更新数据
     * @param Request $request
     * @param int $id
     * @return int 
     */
    public function update($id, Request $request) {
        try {
            \DB::beginTransaction();
            $changeData = $this->changeData($request);
            $data = $this->service->change($id, $changeData);
            \DB::commit(); 
        } catch(\Exception $e) {
            logger('更新错误');
            logger($e->getMessage());
            \DB::rollBack();
            throw new \Exception($e);
        }
        return $this->response($data);
    }
    
    /**
     * @name: LiShangHeng
     * @msg: 删除
     * @param int $id
     * @return 
     */
    public function destroy($id) {
        try {
            $result = $this->service->softDestroy($id);
        } catch(\Exception $e) {
            logger($e->getMessage());
            \DB::rollBack();
            throw new \Exception($e);
        }
        return $this->response($result);
    }

    /**
     * @name: LiShangHeng
     * @msg: 列表验证数据
     * @param  Request $request 
     * @return array 
     */
    private function listData(Request $request)
    {
        $pageRule =  [
            'no_page' => 'integer',
            'page_num' => 'integer',
        ];
        return $request->validate($this->pageRule + $this->listRule);
    }

    /**
     * @name: LiShangHeng
     * @msg: 保存验证数据
     * @param  Request $request 
     * @return array 
     */
    private function storeData(Request $request)
    {
        $requestData = $request->validate($this->storeRule);
        return $requestData;
    }

    /**
     * @name: LiShangHeng
     * @msg: 更新验证数据
     * @param  Request $request 
     * @return array 
     */
    private function changeData(Request $request)
    {
        $requestData = $request->validate($this->changeRule);
        return $requestData;
    }
    
    // Test function
    public function test() {
        return $this->response([
            ['this is a test msg']
        ]);
    }
}
